"""Add report and user restriction features

Revision ID: 27499cd3fe79
Revises: b0f0c393edce
Create Date: 2025-10-08 10:36:05.236122

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '27499cd3fe79'
down_revision = 'b0f0c393edce'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('report',
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('reporter_id', sa.Integer(), nullable=False),
    sa.Column('reported_user_id', sa.Integer(), nullable=False),
    sa.Column('post_id', sa.Integer(), nullable=True),
    sa.Column('comment_id', sa.Integer(), nullable=True),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['comment_id'], ['comment.comment_id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['post.post_id'], ),
    sa.ForeignKeyConstraint(['reported_user_id'], ['User.user_id'], ),
    sa.ForeignKeyConstraint(['reporter_id'], ['User.user_id'], ),
    sa.PrimaryKeyConstraint('report_id')
    )
    
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_restricted', sa.Boolean(), nullable=False, server_default='false'))
        batch_op.alter_column('student_id',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.alter_column('school_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('last_login',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.drop_constraint(batch_op.f('User_department_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('User_school_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'department', ['department_id'], ['department_id'])
        batch_op.create_foreign_key(None, 'school', ['school_id'], ['school_id'])

    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('comment_user_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('comment_post_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'post', ['post_id'], ['post_id'])
        batch_op.create_foreign_key(None, 'User', ['user_id'], ['user_id'])
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('department', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('department_school_id_fkey'), type_='foreignkey')

    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.alter_column('scope',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.drop_constraint(batch_op.f('post_user_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'User', ['user_id'], ['user_id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('post_user_id_fkey'), 'User', ['user_id'], ['user_id'], ondelete='CASCADE')
        batch_op.alter_column('scope',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)

    with op.batch_alter_table('department', schema=None) as batch_op:
        batch_op.create_foreign_key(batch_op.f('department_school_id_fkey'), 'school', ['school_id'], ['school_id'], ondelete='CASCADE')

    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('comment_post_id_fkey'), 'post', ['post_id'], ['post_id'], ondelete='CASCADE')
        batch_op.create_foreign_key(batch_op.f('comment_user_id_fkey'), 'User', ['user_id'], ['user_id'], ondelete='CASCADE')

    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('User_school_id_fkey'), 'school', ['school_id'], ['school_id'], ondelete='CASCADE')
        batch_op.create_foreign_key(batch_op.f('User_department_id_fkey'), 'department', ['department_id'], ['department_id'], ondelete='CASCADE')
        batch_op.alter_column('last_login',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
        batch_op.alter_column('school_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('password_hash',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               existing_nullable=False)
        batch_op.alter_column('student_id',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
        batch_op.drop_column('is_restricted')

    op.create_table('Post',
    sa.Column('post_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('scope', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name=op.f('Post_user_id_fkey')),
    sa.PrimaryKeyConstraint('post_id', name=op.f('Post_pkey'))
    )
    op.create_table('Department',
    sa.Column('department_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('department_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('school_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['school_id'], ['School.school_id'], name=op.f('Department_school_id_fkey')),
    sa.PrimaryKeyConstraint('department_id', name=op.f('Department_pkey'))
    )
    op.create_table('School',
    sa.Column('school_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('school_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('school_id', name=op.f('School_pkey'))
    )
    op.drop_table('report')
    # ### end Alembic commands ###
